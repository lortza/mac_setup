# New snippet: `snip` TAB
#
# '.source.coffee':              <-- the source
#   'Console log':               <-- the description
#     prefix: 'log'            <-- the tab prompt
#     body: 'console.log($1)'  <-- the snippet
#
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson


# Markdown
'.source.gfm':
  'Github':
    prefix: 'github'
    body: '[Anne Richardson](https://github.com/lortza)'

  'Jekyll Post':
    prefix: 'post'
    body: """
      ---
      layout: post
      title:  $1
      date:   ${2:YYYY}-${3:MM}-${4:DD}
      ---

      $5
    """

  'codeblock':
    prefix: 'codeblock'
    body: """
      {% highlight ${1:ruby} %}
      $2
      {% endhighlight %}
    """

  'for each Loop':
    prefix: 'foreach'
    body: """
      {% for ${1:post} in site.${1:post}s %}
        $2
      {% endfor %}
    """

# Plain HTML & ERB
'.text.html.basic, .text.html.ruby, .text.html.erb':

  'binding.pry':
    prefix: 'bp'
    body: '<%= binding.pry %>'

  'erb tag':
    prefix: 'erb'
    body: '<%= $1 %>'

  'erb return':
    prefix: 'rtn'
    body: '<% $1 %>'

  'Comment':
    prefix: 'com'
    body: """
      <!-- $1 -->
      """

  'a href':
    prefix: 'alink'
    body: """
    <a href="$1" target="${2:_blank}" alt="$3" title="$3" class="$4">$5</a>
    """

  'div class':
    prefix: 'divc'
    body: """
      <div class="$1">
        $2
      </div>
      """

  'div id':
    prefix: 'divi'
    body: """
      <div id="$1">
        $2
      </div>
      """

  'div row':
    prefix: 'divr'
    body: """
      <div class="row">
        <div class="col-$1">
          $2
        </div> <!-- col-$1 -->
      </div> <!-- row -->
    """

  'HTML Table':
    prefix: 'table'
    body: """
      <table>
        <thead>
          <tr>
            <th>$1</th>
            <th></th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </tbody>
      </table>
    """

  'HTML Table with Loop':
    prefix: 'tableloop'
    body: """
      <table>
        <thead>
          <tr>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <% @${1}${2:s}.each do |$1| %>
            <tr>
              <td><%= $1.$3 %></td>
            </tr>
          <% end %>
        </tbody>
      </table>
    """

  'HTML Bootstrap 4':
    prefix: 'htmlbs4'
    body: """
      <!DOCTYPE HTML>
      <html lang="en">
        <head>
          <meta name="description" content="$1">
          <meta charset="utf-8">
          <meta http-equiv="X-UA-Compatible" content="IE=edge">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
          <title>$1</title>

          <!-- FontAwesome -->
          <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.0.10/css/all.css" integrity="sha384-KwxQKNj2D0XKEW5O/Y6haRH39PE/xry8SAoLbpbCMraqlX7kUP6KHOnrlrtvuJLR" crossorigin="anonymous">

          <!-- Latest compiled and minified CSS -->
          <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous">

          <!-- Local Stylesheets -->
          <link rel="stylesheet" type="text/css" href="styles.css">

          <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
          <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
          <!--[if lt IE 9]>
            <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
            <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
          <![endif]-->
        </head>
        <body>
          <h1>Hello, world!</h1>

          $2

          <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
          <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js" integrity="sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ" crossorigin="anonymous"></script>

          <!-- Latest compiled and minified JavaScript -->
          <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js" integrity="sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm" crossorigin="anonymous"></script>

          <!-- Local Scripts -->
          <script type="text/javascript" src="scripts.js"></script>
        </body>
      </html>
    """


# Ruby
'.source.ruby':
  'binding.pry':
    prefix: 'bp'
    body: """
      binding.pry
    """

  '{} + tab => { x }':
    prefix: '{}'
    body: """
      { $1 }
    """

  'Method':
    prefix: 'def'
    body: """
      def $1
      end
    """

  'rspec let':
    prefix: 'let'
    body: 'let(:$1) { $2 }'

  'rspec let build':
    prefix: 'letb'
    body: 'let(:$1) { build(:$1$2) }'

  'rspec let create':
    prefix: 'letc'
    body: 'let(:$1) { create(:$1$2) }'

  'rspec describe block':
    prefix: 'describe'
    body: """
    describe '$1' do
      $2
    end
    """

  'rspec it block':
    prefix: 'it'
    body: """
    it '$1' do
      $2
    end
    """

  'rspec xit block':
    prefix: 'xit'
    body: """
    xit '$1' do
      $2
    end
    """


# CSS/SCSS
'.source.sass, .source.css':
  'comment':
    prefix: 'com'
    body: '/* $1 */'

  'CSS Class':
    prefix: 'cl'
    body: '.$1 {\n\t$2\n} /* $1 */'


# Javascript
'.source.js, .source.jsx, .source.js.jsx':
  'Console log':
    prefix: 'con'
    body: 'console.log($1)'

  'React Constructor':
    prefix: 'reconst'
    body: """
      constructor(props) {
        super(props)
        this.state = {
          $1
        }
      }
      """

  'querySelector()':
    prefix: 'qu'
    body: 'querySelector($1)',

  'forEach':
    prefix: 'for'
    body: 'forEach(function($1){$2})'

  'React Map':
    prefix: 'remap'
    body: """
      { ${1}${2:s}.map(($1) => { return <${3}${1} key={shortid.generate()} data={$1}/> }) }
    """

  'Promise If':
    prefix: 'promiseif'
    body: """
    new Promise(function(resolve, reject) {
      if ($1) {
        resolve($2);
      } else {
        reject($3);
      };
    });
    """

  'catch':
    prefix: 'catch'
    body: 'catch(err => console.log(err))'

  'div className':
    prefix: 'divc'
    body: """
      <div className="$1" >
        $2
      </div>
      """

  'React Class':
    prefix: 'reclass'
    body: """
      import React from "react"

      class $1 extends React.Component {
        render(){
          return (
            <React.Fragment>
              <p>$1</p>
            </React.Fragment>
          )
        }
      }

      export default $1
      """

  'React Fragment':
    prefix: 'refrag'
    body: """
      <React.Fragment>
        $1
      </React.Fragment>
      """

  'React Reference':
    prefix: 'reref'
    body: """
      $1Ref = React.createRef()
      ref={this.$1Ref}
      """

  '<h1> etc':
    prefix: 'h1'
    body: '<h${1:1}>$2</h${1:1}>'

  'HTML element':
    prefix: 'ele'
    body: '<$1>$2</$1>'
